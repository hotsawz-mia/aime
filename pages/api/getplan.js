// Receives POST data from a frontend form.
// Uses form data to generate a prompt for OpenAI.
// Parses the OpenAI response as JSON.
// normalizes data for db
// Saves the plan and Clerk user ID to MongoDB.
// Returns the new plan’s ID to the frontend.
import clientPromise from "../../lib/mongodb";
import { getAuth } from "@clerk/nextjs/server";
import { Configuration, OpenAIApi } from "openai";
import JSON5 from "json5";
import normalizer from "../../lib/normalizer";
import calculateWeeks from "../../lib/calculateWeeks";

export default async function handler(req, res) {
    console.log("Inside handler in getplan"); 
    if (req.method === "POST") {
    const config = new Configuration({
        apiKey: process.env.OPENAI_API_KEY,
    });

    const openai = new OpenAIApi(config);
    const client = await clientPromise;
    const db = client.db("aime");
    const plans = db.collection("plans");
    const { userId } = getAuth(req);
    console.log("UserId generated by clerk inside getplan", userId);

    // grab form data from request body - based on Client form
    const {
        aim,
        success,
        startingLevel,
        targetDate,
        timePerDay
    } = req.body;

    // ✅ Validate input before doing anything else
    if (!aim || !success || !startingLevel || !targetDate || !timePerDay) {
      return res.status(400).json({ error: "All fields are required" });
    }

    console.log("req.body inside getplan", req.body);

    const numberOfWeeksForPlan = calculateWeeks(targetDate)

    let content = "";
    try {
      const response = await openai.createChatCompletion({
        model: "gpt-3.5-turbo",
        messages: [
          {
            role: "system",
            content:
              "You are a helpful skill development coach. You create structured, step-by-step learning plans in JSON format.",
          },
          {
            role: "user",
            content: `
Here is my information:
- Aim: ${aim}
- Success looks like: ${success}
- Starting level: ${startingLevel}
- Target date: ${targetDate}
- Total weeks ${numberOfWeeksForPlan}
- Time available per day: ${timePerDay} minutes

Please generate a personalized learning plan in JSON format. 
Structure it by weeks and for each week include:
- objectives
- activities
- tips
Make sure the JSON is valid and parseable. There should be ${numberOfWeeksForPlan} weeks in total
`,
          },
        ],
      });
      content = response.data.choices?.[0]?.message?.content ?? "";
    } catch (e) {
      console.error("OpenAI call failed:", e);
      return res.status(502).json({ error: "Upstream AI service failed" });
    }

    console.log("content from openAI response", content);

    if (!content || typeof content !== "string" || content.trim() === "") {
      return res.status(502).json({ error: "OpenAI response content is empty or invalid" });
    }

    function stripAndParseJSON(str) {
      const trimmed = str.trim();
      const withoutFences = trimmed.replace(/^```(?:json)?\s*|\s*```$/g, "");
      try{
        return JSON5.parse(withoutFences);
      } catch (e) {
        throw new Error("Failed to parse JSON");
      }
    }
    


let plan = {
  learning_plan: {
    weeks: []
  }
};
    try {
      plan = stripAndParseJSON(content);
    } catch (e) {
      console.error("Failed to parse OpenAI response:", e, { content });
      return res.status(500).json({ error: "OpenAI did not return valid JSON" });
    }

// uses imported helper function to normalize Ai response before saving to DB
const normalizedLearningPlan = normalizer(plan);
plan.learning_plan = {
  aim,
  success: success,
  startingLevel: startingLevel,
  targetDate: targetDate,
  timePerDay: timePerDay,
  weeks: normalizedLearningPlan.weeks || []
};

    console.log("parsed content from plan", plan);

  try{
     // Insert the plan into MongoDB
    const result = await plans.insertOne({
      plan,
      createdAt: new Date(),
    //   coming from Clerk server side
      userId
    });

    console.log("MongoDB insertOne result:", result);

    res.status(200).json({ id: result.insertedId });
    console.log("planId that was inserted into db", result.insertedId);
  } catch (e) {
    console.error("MongoDB insert failed:", e);
    if (e.message === "Method not allowed") {
      return res.status(405).json({error: "Method not allowed"});
    }
    return res.status(500).json({error: "Database insert failed"});
    }
  }
}


