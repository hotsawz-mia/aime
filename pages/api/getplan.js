// Receives POST data from a frontend form.
// Uses form data to generate a prompt for OpenAI.
// Parses the OpenAI response as JSON.
// Saves the plan and Clerk user ID to MongoDB.
// Returns the new plan’s ID to the frontend.
import clientPromise from "../../lib/mongodb";
import { getAuth } from "@clerk/nextjs/server";
import { Configuration, OpenAIApi } from "openai";
import JSON5 from "json5";

export default async function handler(req, res) {
    console.log("Inside handler in getplan"); 
    if (req.method === "POST") {
    const config = new Configuration({
        apiKey: process.env.OPENAI_API_KEY,
    });

    const openai = new OpenAIApi(config);
    const client = await clientPromise;
    const db = client.db("aime");
    const plans = db.collection("plans");
    const { userId } = getAuth(req);
    console.log("UserId generated by clerk inside getplan", userId);

    // grab form data from request body - based on Client form
    const {
        aim,
        success,
        startingLevel,
        targetDate,
        timePerDay
    } = req.body;

    // ✅ Validate input before doing anything else
    if (!aim || !success || !startingLevel || !targetDate || !timePerDay) {
      return res.status(400).json({ error: "All fields are required" });
    }

    // Coerce and validate timePerDay is a number between 1–60
    const minutes = Number(timePerDay);
    if (!Number.isFinite(minutes) || minutes < 1 || minutes > 60) {
      return res.status(400).json({ error: "timePerDay must be a number between 1 and 60" });
    }

    console.log("req.body inside getplan", req.body);

    let content = "";
    try {
      const response = await openai.createChatCompletion({
        model: "gpt-3.5-turbo",
        messages: [
          {
            role: "system",
            content:
              "You are a helpful skill development coach. You create structured, step-by-step learning plans in JSON format.",
          },
          {
            role: "user",
            content: `
Here is my information:
- Aim: ${aim}
- Success looks like: ${success}
- Starting level: ${startingLevel}
- Target date: ${targetDate}
- Time available per day: ${minutes} minutes

Please generate a personalized learning plan in JSON format. 
Structure it by weeks (or steps if more appropriate), and for each week include:
- objectives
- activities
- tips
Make sure the JSON is valid and parseable.
`,
          },
        ],
      });
      content = response.data.choices?.[0]?.message?.content ?? "";
    } catch (e) {
      console.error("OpenAI call failed:", e);
      return res.status(502).json({ error: "Upstream AI service failed" });
    }

    console.log("content from openAI response", content); // this is where this code runs until

    if (!content || typeof content !== "string" || content.trim() === "") {
      return res.status(502).json({ error: "OpenAI response content is empty or invalid" });
    }

    function stripAndParseJSON(str) {
      const trimmed = str.trim();
      const withoutFences = trimmed.replace(/^```(?:json)?\s*|\s*```$/g, "");
      return JSON5.parse(withoutFences);
    }


    let plan;
    try {
      plan = stripAndParseJSON(content);
    } catch (e) {
      c.error("Faileonsoled to parse OpenAI response:", e, { content });
      return res.status(500).json({ error: "OpenAI did not return valid JSON" });
    }

    // const lp = plan?.learning_plan ?? {};
    // lp.weeks = Array.isArray(lp.weeks) ? lp.weeks : [];
    // lp.weeks = lp.weeks.map(w => ({
    //   ...w,
    //   objectives: Array.isArray(w.objectives) ? w.objectives : (w.objectives ? [w.objectives] : []),
    //   activities: Array.isArray(w.activities) ? w.activities : (w.activities ? [w.activities] : []),
    //   tips:       Array.isArray(w.tips)       ? w.tips       : (w.tips       ? [w.tips]       : []),
    // }));
    // plan.learning_plan = lp;

    // --- Normalize to a consistent shape we control ---
    const lp = plan?.learning_plan ?? {};

// Ensures any value is returned as an array: 
// - returns the value if already an array,
// - wraps non-array truthy values in an array,
// - returns an empty array for falsy values.
    const toArray = (v) => (Array.isArray(v) ? v : v ? [v] : []);


// Selects the first property that contains an array of weeks, handling different possible key names from OpenAI output.
// note this is short hand for multiple if elseif block. it is a chained ternary
    const rawWeeks =
      Array.isArray(lp.weeks)
        ? lp.weeks
        : Array.isArray(lp.weekly_plan)
        ? lp.weekly_plan
        : Array.isArray(lp.weeklyPlan)
        ? lp.weeklyPlan
        : [];

// Normalizes each week object to a consistent shape, handling multiple possible key names.
// The nullish coalescing operator (??) returns the first value that is not null or undefined.
// Picks w.week_number if it exists, otherwise w.weekNumber, otherwise w.week, otherwise
    const weeks = rawWeeks.map((w) => ({
      week_number: w.week_number ?? w.weekNumber ?? w.week ?? null,
      objectives: toArray(w.objectives),
      activities: toArray(w.activities),
      tips: toArray(w.tips),
    }));

    // coerce time per day to a number (minutes)
    let timePer =
      typeof lp.time_per_day === "number"
        ? lp.time_per_day
        : typeof lp.time_available_per_day === "number"
        ? lp.time_available_per_day
        : typeof lp.time_available_per_day === "string"
        ? parseInt(lp.time_available_per_day, 10)
        : minutes; // fallback to validated input

    const normalized = {
      aim: lp.aim ?? lp.target ?? lp.target_skill ?? "",
      success_criteria: lp.success_criteria ?? lp.successLooksLike ?? "",
      starting_level: lp.starting_level ?? lp.startingLevel ?? "",
      target_date: lp.target_date ?? lp.targetDate ?? "",
      time_per_day: Number.isFinite(timePer) ? timePer : minutes,
      weeks,
    };

    plan.learning_plan = normalized;
    // --- end normalization ---

    console.log("parsed content from plan", plan);

    // Insert the plan into MongoDB
    const result = await plans.insertOne({
      plan,
      createdAt: new Date(),
    //   coming from Clerk server side
      userId
    });

    res.status(200).json({ id: result.insertedId });
    // console.log("planId that was inserted into db", insertedId);
    console.log("planId that was inserted into db", result.insertedId);
  } else {
    res.status(405).json({ message: "Method not allowed" });
  }
}
